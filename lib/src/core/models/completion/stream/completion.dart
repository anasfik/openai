import 'package:collection/collection.dart';
import 'package:meta/meta.dart';

import 'sub_models/choices.dart';

export 'sub_models/choices.dart';

/// {@template openai_stream_completion_model}
/// This class is used to represent an OpenAI stream completion.
/// {@endtemplate}
@immutable
final class OpenAIStreamCompletionModel {
  /// The [id]entifier of the completion.
  final String id;

  /// The date the completion was [created].
  final DateTime created;

  /// The [choices] generated by the completion.
  final List<OpenAIStreamCompletionModelChoice> choices;

  /// The [model] used to generate the completion.
  final String model;

  /// The system fingerprint of the completion.
  final String? systemFingerprint;

  /// Weither the completion have at least one choice in [choices].
  bool get haveChoices => choices.isNotEmpty;

  /// Weither the completion have a system fingerprint.
  bool get haveSystemFingerprint => systemFingerprint != null;

  @override
  int get hashCode {
    return id.hashCode ^ created.hashCode ^ choices.hashCode ^ model.hashCode;
  }

  /// {@macro openai_stream_completion_model}
  const OpenAIStreamCompletionModel({
    required this.id,
    required this.created,
    required this.choices,
    required this.model,
    required this.systemFingerprint,
  });

  /// {@macro openai_stream_completion_model}
  /// This method is used to convert a [Map<String, dynamic>] object to a [OpenAIStreamCompletionModel] object.
  factory OpenAIStreamCompletionModel.fromMap(Map<String, dynamic> json) {
    return OpenAIStreamCompletionModel(
      id: json['id'],
      created: DateTime.fromMillisecondsSinceEpoch(json['created'] * 1000),
      choices: (json['choices'] as List)
          .map((e) => OpenAIStreamCompletionModelChoice.fromMap(e))
          .toList(),
      model: json['model'],
      systemFingerprint: json['system_fingerprint'],
    );
  }

  @override
  bool operator ==(covariant OpenAIStreamCompletionModel other) {
    if (identical(this, other)) return true;
    final listEquals = const DeepCollectionEquality().equals;

    return other.id == id &&
        other.created == created &&
        listEquals(other.choices, choices) &&
        other.model == model &&
        other.systemFingerprint == systemFingerprint;
  }

  @override
  String toString() {
    return 'OpenAIStreamCompletionModel(id: $id, created: $created, choices: $choices, model: $model, systemFingerprint: $systemFingerprint)';
  }
}
