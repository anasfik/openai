import 'package:collection/collection.dart';
import 'package:meta/meta.dart';
import 'sub_models/event.dart';
import 'sub_models/hyper_params.dart';
import 'sub_models/training_files.dart';

export 'sub_models/event.dart';
export 'sub_models/hyper_params.dart';
export 'sub_models/training_files.dart';
export 'stream/fine_tun_event.dart';

/// {@template openai_fine_tune_model}
/// This class is used to represent an OpenAI fine-tuning job.
/// {@endtemplate}
@immutable
final class OpenAIFineTuneModel {
  /// The [id]entifier of the fine-tuning job.
  final String id;

  /// The [model] used for fine-tuning.
  final String model;

  /// The date the fine-tuning job was [created].
  final DateTime createdAt;

  /// The [events] generated by the fine-tuning job.
  final List<OpenAIFineTuneEventModel>? events;

  /// The fine-tuned model.
  final String? fineTunedModel;

  /// The hyperparameters used for fine-tuning.
  final OpenAIFineTuneHyperParamsModel? hyperparams;

  /// The [id]entifier of the organization that owns the fine-tuning job.
  final String? organizationId;

  /// The result files generated by the fine-tuning job.
  final List<String> resultFiles;

  /// The status of the fine-tuning job.
  final String status;

  /// The validation files used for fine-tuning.
  final List<String>? validationFiles;

  /// The training files used for fine-tuning.
  final List<OpenAIFineTuneTrainingFilesModel?> trainingFiles;

  /// The date the fine-tuning job was last [updated].
  final DateTime? updatedAt;

  /// Weither the fine-tuning job have at least one event in [events].
  bool get haveEvents => events != null;

  /// Weither the fine-tuning job have a fine-tuned model.
  bool get haveFineTunedModel => fineTunedModel != null;

  /// Weither the fine-tuning job have hyperparameters.
  bool get haveHyperparams => hyperparams != null;

  /// Weither the fine-tuning job have a organization [id].
  bool get haveOrganizationId => organizationId != null;

  /// Weither the fine-tuning job have at least one validation file in [validationFiles].
  bool get haveValidationFiles => validationFiles != null;

  /// Weither the fine-tuning job have at least one training file in [trainingFiles].
  bool get haveTrainingFiles => trainingFiles.isNotEmpty;

  /// Weither the fine-tuning job have a last update date.
  bool get haveUpdatedAt => updatedAt != null;

  @override
  int get hashCode {
    return id.hashCode ^
        model.hashCode ^
        createdAt.hashCode ^
        events.hashCode ^
        fineTunedModel.hashCode ^
        hyperparams.hashCode ^
        organizationId.hashCode ^
        resultFiles.hashCode ^
        status.hashCode ^
        validationFiles.hashCode ^
        trainingFiles.hashCode ^
        updatedAt.hashCode;
  }

  /// {@macro openai_fine_tune_model}
  const OpenAIFineTuneModel({
    required this.id,
    required this.model,
    required this.createdAt,
    required this.events,
    required this.fineTunedModel,
    required this.hyperparams,
    required this.organizationId,
    required this.resultFiles,
    required this.status,
    required this.validationFiles,
    required this.trainingFiles,
    required this.updatedAt,
  });

  /// {@macro openai_fine_tune_model}
  /// This method is used to convert a [Map<String, dynamic>] object to a [OpenAIFineTuneModel] object.
  factory OpenAIFineTuneModel.fromMap(Map<String, dynamic> json) {
    return OpenAIFineTuneModel(
      id: json['id'],
      model: json['model'],
      createdAt: DateTime.fromMillisecondsSinceEpoch(json['created_at'] * 1000),
      events: (json['events'] as List?)
          ?.map((e) => OpenAIFineTuneEventModel.fromMap(e))
          .toList(),
      fineTunedModel: json['fine_tuned_model'],
      hyperparams: OpenAIFineTuneHyperParamsModel.fromMap(json['hyperparams']),
      organizationId: json['organization_id'],
      resultFiles:
          (json['result_files'] as List).map((e) => e.toString()).toList(),
      status: json['status'],
      validationFiles:
          (json['validation_files'] as List).map((e) => e.toString()).toList(),
      trainingFiles: (json['training_files'] as List)
          .map((e) => OpenAIFineTuneTrainingFilesModel.fromMap(e))
          .toList(),
      updatedAt: DateTime.fromMillisecondsSinceEpoch(json['updated_at'] * 1000),
    );
  }

  @override
  String toString() {
    return 'OpenAIFineTuneModel(id: $id, model: $model, createdAt: $createdAt, events: $events, fineTunedModel: $fineTunedModel, hyperparams: $hyperparams, organizationId: $organizationId, resultFiles: $resultFiles, status: $status, validationFiles: $validationFiles, trainingFiles: $trainingFiles, updatedAt: $updatedAt)';
  }

  @override
  bool operator ==(covariant OpenAIFineTuneModel other) {
    if (identical(this, other)) return true;
    final listEquals = const DeepCollectionEquality().equals;

    return other.id == id &&
        other.model == model &&
        other.createdAt == createdAt &&
        listEquals(other.events, events) &&
        other.fineTunedModel == fineTunedModel &&
        other.hyperparams == hyperparams &&
        other.organizationId == organizationId &&
        listEquals(other.resultFiles, resultFiles) &&
        other.status == status &&
        listEquals(other.validationFiles, validationFiles) &&
        listEquals(other.trainingFiles, trainingFiles) &&
        other.updatedAt == updatedAt;
  }
}
